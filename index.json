[{"categories":["Software Engineer"],"contents":"Unique Paths Question There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time. Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner. The test cases are generated so that the answer will be less than or equal to 2 * 109. Input: m=3, n=7\nOutput: 28\nclass Solution { public int uniquePaths(int m, int n) { int[] dp=new int[m]; for(int i=0;i\u0026lt;m;i++){ dp[i]=1; } for(int j=1;j\u0026lt;n;j++){ for(int i=1;i\u0026lt;m;i++){ dp[i]=dp[i]+dp[i-1]; } } return dp[m-1]; } } ","permalink":"https://Shu682682.github.io/leetcode/leetcode62/","tags":["LeetCode","Java","Data Structure","Algorithms"],"title":"LC-Unique Paths"},{"categories":["Software Engineer"],"contents":" Amazon S3 offers a range of storage classes that you can choose based on your workload\u0026rsquo;s data access, resiliency, and cost requirements. S3 storage classes S3 Intelligent-Tiering: Automatically saves data costs for unknown or changing access patterns. S3 Standard: Suitable for frequently accessed data. S3 Standard-IA \u0026amp; S3 One Zone-IA: Suitable for infrequently accessed data. S3 Glacier Instant Retrieval: Suitable for immediately accessible archive data. S3 Glacier Flexible Retrieval: For rarely accessed long-term data that doesn\u0026rsquo;t need immediate access.(Disaster Recovery) S3 Glacier Deep Archive: For long-term archival and digital preservation. S3 Outposts: Store S3 data on-premises. Amazon Elastic Block Store (Amazon EBS) Provide persistent block storage volumes for use with Amazon EC2 instances in the AWS Cloud.\nAmazon Elastic File System(Amazon EFS) Provide a simple, scalable, elastic file system for Linux-based workloads for use with AWS Cloud services and on-premises resources.\nAmazon FSx for Lustre Fully managed file system.\nAmazon Simple Storage Service(Amazon S3) An object storage service.\nAWS Backup Provide centralize and automate data protection across AWS services and support regulatory compliance or business policies for data protection.\nStorage Gateway A hybrid storage service that enables on-premises applications to seamlessly use AWS cloud storage.\n","permalink":"https://Shu682682.github.io/career/aws_cloud-practitioner1/","tags":["Cloud","AWS"],"title":"AWS Cloud Practitioner-Storage"},{"categories":["Software Engineer"],"contents":"AWS Cloud Practitioner-Database The AWS Cloud Practitioner certificate is an entry-level credential that introduces the basics of cloud computing and AWS services whichl also include cloud concepts, pricing, security, and the global infrastructure. Relational database Amazon Aurora A cloud-native relational database management system (RDBMS) designed to be fully compatible with MySQL and PostgreSQL.\nE.g. SaaS, CRM, ERP\nAmazon RDS A managed service collection that facilitates the easy setup, operation, and scalability of databases in the cloud.\nDeploy on AWS Outposts for on-premises deployment.\nE.g. Web\nAmazon Redshift Use SQL to query across data warehouses, manipulate databases, and analyze structured and semi-structured data in data lakes.\nUse Amazon QuickSight, Tableau, Microsoft PowerBI\nAmazon Key DynamoDB Fully managed, serverless, key-value NoSQL database designed to power high-performance applications at any scale.\nIt offers built-in security, continuous backups, automatic multi-region replication, in-memory caching, and data import/export tools.\nAmazon Memory Amazon ElastiCache A fully managed Redis and Memcached compatible service, providing real-time, cost-optimized performance for modern applications.\nAmazon MemoryDB for Redis Durable database that delivers microsecond reads, low-single-digit millisecond writes, scalability, and enterprise security. Amazon Graph Amazon Neptune A fully managed database service designed for the cloud, making it easier to build and run graph applications.\nAmazon Quantum Ledger Database (Amazon QLDB) Amazon QLDB A fully managed ledger database that provides transparent, immutable, and cryptographically verified transactions.\n","permalink":"https://Shu682682.github.io/career/aws_cloud-practitioner2/","tags":["Cloud","AWS"],"title":"AWS Cloud Practitioner-Database"},{"categories":["Software Engineer"],"contents":"Sum of Root To Leaf Binary Numbers Question You are given the root of a binary tree where each node has a value 0 or 1. Each root-to-leaf path represents a binary number starting with the most significant bit. For all leaves in the tree, consider the numbers represented by the path from the root to that leaf. Return the sum of these numbers. The test cases are generated so that the answer fits in a 32-bits integer. Input: root = [1,0,1,0,1,0,1]\nOutput: 22\nExplanation: (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22\n/** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { int sum=0; public int sumRootToLeaf(TreeNode root) { if(root==null) return 0; findLeaf(root, \u0026#34;\u0026#34;); return sum; } private void findLeaf(TreeNode root, String prev){ if(root==null) return; prev=prev+String.valueOf(root.val); if(root.left==null \u0026amp;\u0026amp; root.right==null){ sum+=Integer.parseInt(prev,2); } findLeaf(root.left, prev); findLeaf(root.right, prev); } } ","permalink":"https://Shu682682.github.io/leetcode/leetcode1022/","tags":["LeetCode","Java","Data Structure","Algorithms"],"title":"LC-Sum of Root To Leaf Binary Numbers"},{"categories":["Software Engineer"],"contents":"AWS Cloud Practitioner-Questions that come up often in tests To prepare for this certification, you should first understand the role of an AWS Cloud process and then comprehend the significance of each terminology, when and how to implement them. Lastly, you need to establish connections between various elements. AWS Service Terms Amazon EC2\nA web service that offers secure and scalable computational capacity in the cloud, along with the ability to train and deploy machine learning applications. AWS ELB\nElastic Load Balancing distributes incoming application traffic across multiple EC2 instances, in multiple Availability Zones. This increases the fault tolerance of your applications. Amazon S3\nAn object storage service that offers industry-leading scalability, data availability, security, and performance. AWS Lambda\nA serverless, event-driven computing service. Executing code without the need to provision or manage infrastructure. AWS Elastic Beanstalk\nDeploy and scale web applications, build mobile API backends using programming languages, and manage patches and updates. Automatically handles the deployment details of capacity provisioning, load balancing, auto-scaling, and application health monitoring. Amazon CloudWatch\nVisualize real-time logs, metrics, and event data to simplify your infrastructure and application maintenance. Monitor application performance, proactively optimize resources, and test website impact. AWS CloudTrail\nMonitor and log account activity within AWS infrastructure, enabling you to manage storage, analyze, and remediate actions. Amazon CloudFront\nDefend against DDoS attacks using AWS Shield Standard, also integrates with AWS WAF that safeguards web applications running on AWS. AWS CloudFormation\nTreating infrastructure as code allows you to model, deploy, and manage AWS and third-party resources and managing infrastructure using DevOps. AWS RDS\nA collection of managed services that facilitate configuring, operating, and scaling databases in the cloud. Amazon Aurora\nA cloud-native relational database management system (RDBMS) designed specifically for cloud deployment, closely aligned with MySQL and PostgreSQL. AWS Outposts\nBasic Infrastructure and Services(Racks and Servers) AWS DMS\nHelp to migrate databases to AWS quickly and securely. The source database remains fully operational during the migration, minimizing downtime to applications that rely on the database. Amazon EMR\nAnalyze and process vast amounts of data by distributing the computational work across a cluster of virtual servers running in the AWS Cloud. Amazon Machine Image (AMI)\nProvide the information required to launch an instance, which is a virtual server in the cloud. AWS Console\nWeb interface for managing your AWS account Security group\nA security group acts as a virtual firewall for your instance to control inbound and outbound traffic. Amazon Inspector\nAn automated vulnerability management service that continuously scans AWS workloads to identify software vulnerabilities and unexpected network risks. AWS Trusted Advisor\nProvides recommendations that help you follow AWS best practices. Trusted Advisor evaluates your account by using checks. These checks identify ways to optimize your AWS infrastructure, improve security and performance, reduce costs, and monitor service quotas. NACL\nA network access control list (ACL) is an optional layer of security for your VPC that acts as a firewall for controlling traffic in and out of one or more subnets. ","permalink":"https://Shu682682.github.io/career/aws_cloud-practitioner_commontesttopic/","tags":["Cloud","AWS"],"title":"AWS Cloud Practitioner-Common Test Questions"},{"categories":["Software Engineer"],"contents":"AWS Cloud Practitioner-Resources To prepare for this certification, you should first understand the role of an AWS Cloud process and then comprehend the significance of each terminology, when and how to implement them. Lastly, you need to establish connections between various elements. AWS Skill Builder Amazon-Training link\nFree online training courses Deliver a 6-hour introductory session on AWS Cloud. Acquire fundamental understanding of cloud technology. Gain a comprehensive understanding of the exam topics. AWS Certified Cloud Practitioner Certification Course Offer in-depth information about AWS Cloud. Engage in hands-on practice. Explain the functions of each element comprehensively. ","permalink":"https://Shu682682.github.io/career/aws_cloud-practitioner_resource/","tags":["Cloud","AWS"],"title":"AWS Cloud Practitioner-Resources"},{"categories":["Software Engineer"],"contents":"AWS Cloud Practitioner-Intro The AWS Cloud Practitioner certificate is an entry-level credential that introduces the basics of cloud computing and AWS services whichl also include cloud concepts, pricing, security, and the global infrastructure. Exam Key Points Cloud Concepts Security and Compliance Technology Billing and Pricing Cloud Computing Models IaaS(Infrastructure as a Service) PaaS(Platform as a Service) SaaS(Software as a Service) Compute Services Amazon ECS has two modes: Fargate launch type and EC2 launch type. Amazon EC2(Elastic Compute Cloud)\nWeb service\n-On-Demand Instances: Pay for you run\n-Spot Instances: 90% discount compated to On-Demand prices, flexible start and end times\n-Reserved Instances: Provide significant discount(up to 72%)\n-Dedicated Hosts: Physical EC2 server, help to meet compliance requriements -Savings Plans: Offer low prices on EC2 and Fargate(1 or 3yrs term)\nAmazon EC2 Auto Scaling:\nDynamic scaling and predictive scaling can be used together to scale faster.\nAmazon AWS Batch:\nPlans, schedules, and runs batch computing workloads across the full range of AWS compute services and features.\nAmazon AWS Elastic Beanstalk:\nService for deploying and scaling web applications and services. E.g. Java, .NET, PHP, Node.js, Python, Ruby, Go\nAmazon AWS Fargate:\nAllow to run containers without having to manage servers or clusters. Package the application in containers, specify the CPU and memory requirements.\nAmazon AWS Lambda:\nRun code without provisioning or managing servers.\nAmazon AWS Serverless Application Repository:\nQuickly deploy code samples, components, and complete applications for common use cases.\nAmzaon AWS Outposts:\nFully managed, maintained, and supported by AWS to deliver access to the latest AWS services.\n","permalink":"https://Shu682682.github.io/career/aws_cloud-practitioner/","tags":["Cloud","AWS"],"title":"AWS Cloud Practitioner Intro"},{"categories":["Software Engineer"],"contents":"Java Object-Oriented Programming Three major Object-Oriented Programming (OOP) concepts in Java are Encapsulation, Inheritance, and Polymorphism. - Class: Define object templates with attributes and methods. - Object: Instances of classes with specific attributes and behavior. - Encapsulation: Bundles attributes and methods, protects with class boundaries. - Inheritance: Inherits properties and methods from another class. - Polymorphism: Different classes, same method names, different behaviors. - Abstract Class: Cannot be instantiated, may contain abstract methods. - Interface: Defines methods for classes to implement. - Overloading: Multiple methods with same name, different parameter lists. - Overriding: Reimplements parent class method in subclass with modified behavior. Encapsulation Bundle data and behavior, hide details, ensure security.\nInheritance Inherit attributes, extend or modify functionality, promote code reuse.\nSubclass: A class that inherits from another class. Subclasses can have multiple subclasses beneath them.\nSuperclass: A class that is inherited by another class.\nJava supports single inheritance only (each class can inherit from only one parent class).\nMethod Override: Child class can rewrite a method inherited from parent class.\n//People=Parent Class public class People{ protected String name; //set up attribute protected int age; protected String address; ----------------------------- public People(){//defalut constructor this.name=\u0026#34;A person\u0026#34;; this.age=0; this.address=\u0026#34;Taiwan\u0026#34;; -------------------------------- public People(String name, int age ,String address){ this.name=name; this.age= age; this.address=address; } public void walk(){ System.out.println(\u0026#34;Walking\u0026#34;); } public void sleep(){ System.out.println(\u0026#34;Sleeping\u0026#34;); } public void printHello(){ System.out.println(\u0026#34;Hello from ppl class\u0026#34;); } //--------subclass =Teacher public class Teacher extends People{ private String subject;//Only need to add own attribute public Teacher(String name, int age ,String address, String subject){ //child class inner constructor does not involve constructor //Automatically run People.defult super(name, age, address); this.subject=subject; } public void teach(){ super.printHello();//inheritance from ppl class System.out.println(\u0026#34;Teaching \u0026#34;+subject); } @Override public void walk(){ System.out.println(\u0026#34;A stu walking like a bosss\u0026#34;);//change content } } Polymorphism Different implementations for same method, enhance flexibility and extensibility.\nCompile-time Polymorphism\nAlso known as method overloading.\nWithin the same class, multiple methods can be defined with the same name but different parameter lists.\nDuring compilation, the compiler determines which specific method to call based on the provided parameter information.\nRuntime Polymorphism\nAlso known as method overriding.\nInheritance allows a subclass to override (rewrite) a method of its parent class to achieve different behavior.\nDuring runtime, the appropriate method is called based on the actual object type.\npublic static void main (String[] args) { //Polymorphism can use superclass來當datatype //parent class People S1=new Student(\u0026#34;Annie\u0026#34;,20,\u0026#34;CA\u0026#34;,39); People S2=new Student(\u0026#34;Jenny\u0026#34;,21,\u0026#34;TX\u0026#34;,39); People T1=new Teacher(\u0026#34;John\u0026#34;,50,\u0026#34;CA\u0026#34;,\u0026#34;Java\u0026#34;); //array People[] people=new People[10]; people[0]=S1; people[1]=S2; people[2]=T1; for(int i=0;i\u0026lt;3;i++){ System.out.println(people[i].name);//Annie, Jenny, John } //ArrayList ArrayList\u0026lt;People\u0026gt; people=new ArrayList\u0026lt;\u0026gt;(); people.add(S1); people.add(S2); people.add(T1); } ","permalink":"https://Shu682682.github.io/career/java_oop/","tags":["Java","Data Structure","Algorithms"],"title":"Java OOP"},{"categories":["Software Engineer"],"contents":"Java Java is a programming language and computing platform first released by Sun Microsystems in 1995, and it is owned by Oracle, and more than 3 billion devices run Java. Basic Java Syntax public static void main (String args[]){\nAttribute\npublic static：Called from any class private static：Only permit to called in same class static：same as public static attribute common class: String Class: Used for manipulating strings, including string concatenation, formatting, and operations. ArrayList Class: Provides a dynamic array with variable size, used to store and manipulate multiple objects. Scanner Class: Used for reading input from the user. Math Class: Provides various mathematical operations, such as computing mathematical constants and performing math calculations. File Class: Used for file and directory handling, including creating, reading, and writing files. Date Class: Used for handling dates and times. Random Class: Used for generating random numbers. HashMap Class: Provides a key-value mapping, used for storing and querying data. Thread Class: Used for multithreaded programming, implementing synchronization. return type\nvoid: Indicates that the method does not return any value. int, double, float, etc.: Represents numeric types and returns corresponding numeric values. boolean: Represents a boolean value (true or false). String: Represents a sequence of characters and returns a text value. Object: Represents a reference to an object of any class. Array: Represents an array of elements. Custom Class: You can define your own classes and use them as return types to encapsulate more complex data. Method\npublic Project3(){} public void testing(){ for (int j =0;j\u0026lt;10;j++){ for(int i =0;i\u0026lt;100;i++){ if (i==5){ return; } System.out.println(j+\u0026#34;\u0026#34;+i); } } } Method Overlaoding Java can define the type of the parameter. public class Prac{ public Prac(){ } public void addition(int a, int b){ System.out.println(a+b); } public void addition(String a, String b){ System.out.println(a+b); } public static void main(String[] args) { Prac m=new Prac(); m.addition(\u0026#34;14\u0026#34;,\u0026#34;13\u0026#34;); m.addition(7,8); } } //output:15(int) //output:1413(String) class test{ private int x, y; public test(int x, int y){//constructor this.x = x;//this()：Called same class constructor. this.y = y;//super()：Called parent class constructor from child class. } public void summary(){//method System.out.println(x + y); } } public class example{ public static void main(String[] args){ test x = new test(3, 5); x.summary(); } } //output:8 ","permalink":"https://Shu682682.github.io/career/java_basic/","tags":["Java","Data Structure","Algorithms"],"title":"Java Introduction"},{"categories":["Software Engineer"],"contents":"Longest Substring Without Repeating Characters Question Given a string s, find the length of the longest substring without repeating characters. Input: s = \u0026ldquo;abcabcbb\u0026rdquo;\nOutput: 3\nExplanation: The answer is \u0026ldquo;abc\u0026rdquo;, with the length of 3.\nclass Solution { public int lengthOfLongestSubstring(String s) { int n = s.length(); int ans = 0; int left = 0, right = 0; HashSet\u0026lt;Character\u0026gt; set = new HashSet\u0026lt;\u0026gt;(); while (left \u0026lt; n \u0026amp;\u0026amp; right \u0026lt; n) { if (!set.contains(s.charAt(right))) { set.add(s.charAt(right++)); ans = Math.max(ans, right - left); } else { set.remove(s.charAt(left++)); } } return ans; } } ","permalink":"https://Shu682682.github.io/leetcode/leetcode3/","tags":["LeetCode","Java","Data Structure","Algorithms"],"title":"LC-Longest Substring Without Repeating Characters"},{"categories":["Software Engineer"],"contents":"Add Two Numbers Question You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. Input: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.\npublic static ListNode addTwoNumbers(ListNode l1, ListNode l2) { ListNode dummy = new ListNode(); ListNode temp = dummy; int carry = 0; while (l1 != null || l2 != null || carry == 1) { int sum = 0; if (l1 != null) { sum += l1.val; l1 = l1.next; } if (l2 != null) { sum += l2.val; l2 = l2.next; } sum += carry; carry = sum / 10; ListNode node = new ListNode(sum % 10); temp.next = node; temp = temp.next; } return dummy.next; } ","permalink":"https://Shu682682.github.io/leetcode/leetcode2/","tags":["LeetCode","Java","Data Structure","Algorithms"],"title":"LC-Add Two Numbers"},{"categories":["Software Engineer"],"contents":"Two Sum Question Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. Input: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\nclass Solution { public int[] twoSum(int[] nums, int target) { HashMap\u0026lt;Integer, Integer\u0026gt; map =new HashMap\u0026lt;\u0026gt;(); for(int i=0;i\u0026lt;nums.length;i++){ int num=nums[i]; int res=target-nums[i]; if(map.containsKey(res)){ return new int[] {map.get(res),i}; }map.put(num, i); }return null; } } ","permalink":"https://Shu682682.github.io/leetcode/leetcode1/","tags":["LeetCode","Java","Data Structure","Algorithms"],"title":"LC-Two Sum"},{"categories":["Software Engineer"],"contents":"Merge Two Sorted Lists Question You are given the heads of two sorted linked lists list1 and list2. Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list. Input: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\nInput: list1 = [], list2 = [] Output: []\nclass Solution { public ListNode mergeTwoLists(ListNode list1, ListNode list2) { if(list1!=null \u0026amp;\u0026amp; list2!=null){ if(list1.val\u0026lt;list2.val){// list1.next=mergeTwoLists(list1.next, list2); return list1; }else{ list2.next=mergeTwoLists(list2.next, list1); return list2; } } if(list1==null){ return list2; }return list1; } } ","permalink":"https://Shu682682.github.io/leetcode/leetcode21/","tags":["LeetCode","Java","Data Structure","Algorithms"],"title":"LC-Merge Two Sorted Lists"},{"categories":["Software Engineer"],"contents":"Remove Duplicates from Sorted Array Question Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums. Input: nums = [0,0,1,1,1,2,2,3,3,4]\nOutput: 5, nums = [0,1,2,3,4,,,,,_]\nclass Solution { public int removeDuplicates(int[] nums) { int[] newAr=new int[nums.length]; int j=0; for(int i=1;i\u0026lt;nums.length;i++){ if(nums[i]!=nums[j]){ nums[j+1]=nums[i]; j++; } }return j+1; } } ","permalink":"https://Shu682682.github.io/leetcode/leetcode26/","tags":["LeetCode","Java","Data Structure","Algorithms"],"title":"LC-Remove Duplicates from Sorted Array"},{"categories":["Software Engineer"],"contents":"Remove Element Question Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val. Input: nums = [3,2,2,3], val = 3\nOutput: 2, nums = [2,2,,]\nInput: nums = [0,1,2,2,3,0,4,2], val = 2\nOutput: 5, nums = [0,1,4,0,3,,,_]\nclass Solution { public int removeElement(int[] nums, int val) { int res=0; for(int i=0;i\u0026lt;nums.length;i++){ if(nums[i]!=val){ nums[res]=nums[i]; res++; } } return res; } } ","permalink":"https://Shu682682.github.io/leetcode/leetcode27/","tags":["LeetCode","Java","Data Structure","Algorithms"],"title":"LC-Remove Duplicates from Sorted Array"},{"categories":["Software Engineer"],"contents":"Longest Palindromic Substring Question Given a string s, return the longest palindromic substring in s. Input: s = \u0026ldquo;babad\u0026rdquo;\nOutput: \u0026ldquo;bab\u0026rdquo;\nExplanation: \u0026ldquo;aba\u0026rdquo; is also a valid answer.\nclass Solution { public String longestPalindrome(String s) { if(s==null || s.length()\u0026lt;1) return\u0026#34;\u0026#34;; int start=0; int end=0; for(int i=0;i\u0026lt;s.length();i++){ int len1=expfromiddle(s,i,i); int len2=expfromiddle(s,i,i+1); int len= Math.max(len1,len2); if(len\u0026gt;end-start){ start=i-((len-1)/2); end=i+(len/2); } } return s.substring(start, end+1); } public int expfromiddle(String s, int left, int right){ if(s==null||left\u0026gt;right) return 0; while(left\u0026gt;=0 \u0026amp;\u0026amp; right\u0026lt;s.length()\u0026amp;\u0026amp;s.charAt(left)==s.charAt(right)){ left--; right++; } return right-left-1; } } ","permalink":"https://Shu682682.github.io/leetcode/leetcode5/","tags":["LeetCode","Java","Data Structure","Algorithms"],"title":"LC-Longest Palindromic Substring"},{"categories":["Software Engineer"],"contents":"Valid Parentheses Question Given a string s containing just the characters \u0026lsquo;(\u0026rsquo;, \u0026lsquo;)\u0026rsquo;, \u0026lsquo;{\u0026rsquo;, \u0026lsquo;}\u0026rsquo;, \u0026lsquo;[\u0026rsquo; and \u0026lsquo;]\u0026rsquo;, determine if the input string is valid. Input: s = \u0026ldquo;()\u0026rdquo;\nOutput: true\nInput: s = \u0026ldquo;(]\u0026rdquo;\nOutput: false\nclass Solution { public boolean isValid(String s) { Stack\u0026lt;Character\u0026gt; stack=new Stack\u0026lt;\u0026gt;(); for(char c:s.toCharArray()){ if(c==\u0026#39;(\u0026#39;){ stack.push(\u0026#39;)\u0026#39;); }else if(c==\u0026#39;[\u0026#39;){ stack.push(\u0026#39;]\u0026#39;); }else if(c==\u0026#39;{\u0026#39;){ stack.push(\u0026#39;}\u0026#39;); }else{ if(stack.empty()) return false; char temp=stack.pop(); if(c!=temp){ return false; } } } if(!stack.empty()){ return false; }return true; } } ","permalink":"https://Shu682682.github.io/leetcode/leetcode20/","tags":["LeetCode","Java","Data Structure","Algorithms"],"title":"LC- Valid Parentheses"},{"categories":["Software Engineer"],"contents":"Palindrome Number Question Given an integer x, return true if x is a palindrome, and false otherwise. Input: x = 121\nOutput: true\nExplanation: 121 reads as 121 from left to right and from right to left.\nclass Solution { public boolean isPalindrome(int x) { if(x\u0026lt;0) return false; if(x%10==0\u0026amp;\u0026amp; x!=0) return false; int res=0; while(x\u0026gt;res){ res=res*10+x%10; x/=10; } return res/10==x||res==x; } } ","permalink":"https://Shu682682.github.io/leetcode/leetcode9/","tags":["LeetCode","Java","Data Structure","Algorithms"],"title":"LC-Palindrome Number"},{"categories":["Software Engineer"],"contents":"Reverse Integer Question Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0. Input: x = 123\nOutput: 321\nInput: x = -123\nOutput: -321\nclass Solution { public int reverse(int x) { int res=0; while(x!=0){ int tail=x%10; int temp=res*10+tail; if(temp/10!=res) return 0; res=temp; x/=10; } return res; } } ","permalink":"https://Shu682682.github.io/leetcode/leetcode7/","tags":["LeetCode","Java","Data Structure","Algorithms"],"title":"LC-Reverse Integer"},{"categories":["Tasty Journey"],"contents":"Brunch Imagine a lazy Sunday morning, and I\u0026rsquo;m all set to chow down on a mouthwatering brunch that\u0026rsquo;s a total flavor explosion. It\u0026rsquo;s that sweet moment when I can just kick back and take it easy. I find a cozy spot, let out a sigh of relief, and feel all the stress melt away. I\u0026rsquo;m sipping on a hot cup of joe, and let me tell you, the smell alone is pure relaxation. The vibe is just right – people chatting, forks clinking, and some chill tunes in the background.\nEvery bite of my killer brunch is like a mini adventure for my taste buds, a perfect combo of sweet and savory. I\u0026rsquo;m taking my sweet time, savoring each bite like it\u0026rsquo;s the last.\nThis is my chance to disconnect from the usual grind, toss out all those deadlines and to-do lists. This easygoing morning is all about soaking up the chill vibes and just enjoying the moment. And as I take that next sip of coffee, I realize that these laid-back moments are what make weekends seriously awesome.\n","permalink":"https://Shu682682.github.io/foodie/brunch/","tags":["Foodie"],"title":"Embracing Leisure Moments"},{"categories":["California Life"],"contents":"Telecom Carrier As a student, finding the best deal is my top priority when choosing a telecom carrier. Price plays a crucial role in determining which carrier suits my budget and needs. Additionally, some telecom carriers offer eSim, which is particularly helpful for international students like me. One of the main reasons eSim is valuable to me is because I can use my hometown sim card to receive important SMS, such as credit card authorization messages. This flexibility allows me to stay connected to essential services while enjoying the benefits and cost savings of my chosen carrier’s plan.\nAs I embark on this decision-making journey, I understand the significance of striking the right balance between affordability and essential features. By considering both the price and eSim availability, I aim to find a telecom carrier that not only offers a great deal but also caters to my unique needs as an international student.\n","permalink":"https://Shu682682.github.io/journeys/telecom/","tags":["USA Life"],"title":"Telecom Carrier"},{"categories":["California Life"],"contents":"Navigating the House Rental Journey Finding housing has been a challenging task for me, especially since I am not physically in California during my search for a rental home. As a result, I\u0026rsquo;ve had to rely on virtual methods to explore available options. However, this approach comes with its own set of concerns, particularly the need to be cautious about potential housing scammers.\nPrice, proximity to my school, and safety are critical factors I must consider while evaluating housing options. Connecting with landlords to gather information has taken up a significant amount of my time, as I strive to make informed decisions from afar.\nAnother hurdle arises when it comes to remitting the deposit to the landlord before my arrival. Since I lack friends or relatives in California who can help authenticate the process, I find myself facing the risk of potential scams. Losing the deposit in case the landlord disappears without providing the promised accommodation is a distressing thought.\nFurthermore, not having a car limits my options as I must ensure the chosen house is within a reasonable distance from my school. After extensive searching and deliberation, I have finally found a house that requires a mere 15-minute bike ride to reach my campus. While it may not be the most convenient, it is the most affordable option available.\n","permalink":"https://Shu682682.github.io/journeys/house_rental/","tags":["Rental"],"title":"House Hunting"},{"categories":[""],"contents":"Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Emphasis Emphasis, aka italics, with asterisks or underscores.\nStrong emphasis, aka bold, with asterisks or underscores.\nCombined emphasis with asterisks and underscores.\nStrikethrough uses two tildes. Scratch this.\nLink I\u0026rsquo;m an inline-style link\nI\u0026rsquo;m an inline-style link with title\nI\u0026rsquo;m a reference-style link\nI\u0026rsquo;m a relative reference to a repository file\nYou can use numbers for reference-style link definitions\nOr leave it empty and use the link text itself.\nURLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example).\nSome text to show that the reference links can follow later.\nParagraph Lorem ipsum dolor sit amet consectetur adipisicing elit. Quam nihil enim maxime corporis cumque totam aliquid nam sint inventore optio modi neque laborum officiis necessitatibus, facilis placeat pariatur! Voluptatem, sed harum pariatur adipisci voluptates voluptatum cumque, porro sint minima similique magni perferendis fuga! Optio vel ipsum excepturi tempore reiciendis id quidem? Vel in, doloribus debitis nesciunt fugit sequi magnam accusantium modi neque quis, vitae velit, pariatur harum autem a! Velit impedit atque maiores animi possimus asperiores natus repellendus excepturi sint architecto eligendi non, omnis nihil. Facilis, doloremque illum. Fugit optio laborum minus debitis natus illo perspiciatis corporis voluptatum rerum laboriosam.\nList List item List item List item List item List item Unordered List List item List item List item List item List item Code and Syntax Highlighting Inline code has back-ticks around it.\nvar s = \u0026#34;JavaScript syntax highlighting\u0026#34;; alert(s); s = \u0026#34;Python syntax highlighting\u0026#34; print s No language indicated, so no syntax highlighting. But let\u0026#39;s throw in a \u0026lt;b\u0026gt;tag\u0026lt;/b\u0026gt;. Blockquote This is a blockquote example.\nInline HTML You can also use raw HTML in your Markdown, and it\u0026rsquo;ll mostly work pretty well.\nTables Colons can be used to align columns.\nTables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don\u0026rsquo;t need to make the raw Markdown line up prettily. You can also use inline Markdown.\nMarkdown Less Pretty Still renders nicely 1 2 3 Image Youtube video ","permalink":"https://Shu682682.github.io/blog/pre-arrival/","tags":null,"title":"How To Use Checklists To Improve Your UX"},{"categories":null,"contents":"","permalink":"https://Shu682682.github.io/blog/bit_manipulation/","tags":null,"title":""},{"categories":null,"contents":"Test\nPancake Test Test Hello What are you quote\nword(/blog/post-1)\nThis is testhello\nprint(\u0026#34;Hello World\u0026#34;) Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 ","permalink":"https://Shu682682.github.io/blog/pancake/","tags":null,"title":""},{"categories":null,"contents":"","permalink":"https://Shu682682.github.io/blog/queuestack/","tags":null,"title":""},{"categories":null,"contents":"","permalink":"https://Shu682682.github.io/blog/stringcharacter/","tags":null,"title":""},{"categories":null,"contents":"Pancake ","permalink":"https://Shu682682.github.io/blog/test2/","tags":null,"title":""}]